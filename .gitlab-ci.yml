stages:
  - build
  - deploy

# TODO
# * remove make
# * share artifacts between stages
# * use gitlab image registry

.docker: &docker
  image: docker:latest
  services:
    - docker:dind

.docker_login:
  - &docker_login
    echo "$REGISTRY_PASSWORD" | docker login -u $REGISTRY_USERNAME
    --password-stdin $REGISTRY_HOSTNAME

.install_make: &install_make
  - apk add --no-cache make

# gentoo

.build_gentoo: &build_gentoo
  - cd gentoo
  - export TAG=$(date +%Y%m%d)
  - make build:${TARGET}:${TAG}
  - docker tag grauwoelfchen/gentoo-${TARGET}:$TAG
    $REGISTRY_HOSTNAME/grauwoelfchen/gentoo-${TARGET}:$TAG

build-gentoo-amd64:
  <<: *docker
  stage: build
  variables:
    TARGET: amd64
  before_script:
    - *install_make
  script:
    - *build_gentoo
  only:
    - master

build-gentoo-amd64-nomultilib:
  <<: *docker
  stage: build
  variables:
    TARGET: amd64-nomultilib
  before_script:
    - *install_make
  script:
    - *build_gentoo
  only:
    - master

deploy-gentoo-amd64:
  <<: *docker
  stage: deploy
  variables:
    TARGET: amd64
  before_script:
    - *install_make
    - docker version
    - *docker_login
  script:
    - *build_gentoo
    - docker push $REGISTRY_HOSTNAME/grauwoelfchen/gentoo-${TARGET}:$TAG
  after_script:
    - docker logout
  only:
    - /^gentoo-amd64-.*/
  except:
    - branches
    - /^gentoo-amd64-nomultilib-.*/

deploy-gentoo-amd64-nomultilib:
  <<: *docker
  stage: deploy
  variables:
    TARGET: amd64-nomultilib
  before_script:
    - *install_make
    - docker version
    - *docker_login
  script:
    - *build_gentoo
    - docker push $REGISTRY_HOSTNAME/grauwoelfchen/gentoo-${TARGET}:$TAG
  after_script:
    - docker logout
  only:
    - /^gentoo-amd64-nomultilib-.*/
  except:
    - branches

# rust

.build_rust_latest: &build_rust_latest
  - cd rust
  - make build:${TARGET}
  - docker tag grauwoelfchen/rust:${TARGET}
    $REGISTRY_HOSTNAME/grauwoelfchen/rust:${TARGET}

.build_rust_version: &build_rust_version
  - cd rust
  - make build:${TARGET}
  - VERSION=$(docker container run -it --rm grauwoelfchen/rust:stable rustc -V)
  - docker tag grauwoelfchen/rust:${TARGET}
    grauwoelfchen/rust:${VERSION}-${TARGET}
  - docker tag grauwoelfchen/rust:${VERSION}-${TARGET}
    $REGISTRY_HOSTNAME/grauwoelfchen/rust:${VERSION}-${TARGET}

build-rust-stable:
  <<: *docker
  stage: build
  variables:
    TARGET: stable
  before_script:
    - *install_make
  script:
    - *build_rust_latest
  only:
    - master

deploy-rust-stable:
  <<: *docker
  stage: deploy
  variables:
    TARGET: stable
  before_script:
    - *install_make
    - docker version
    - *docker_login
  script:
    - *build_rust_latest
    - docker push $REGISTRY_HOSTNAME/grauwoelfchen/rust:${TARGET}
  after_script:
    - docker logout
  only:
    - /^rust-stable-.*/
  except:
    - branches
    - /^rust-stable-fearless-.*/

build-rust-stable-fearless:
  <<: *docker
  stage: build
  variables:
    TARGET: stable-fearless
  before_script:
    - *install_make
    - docker version
    - *docker_login
  script:
    - *build_rust_latest
  only:
    - master

deploy-rust-stable-fearless:
  <<: *docker
  stage: deploy
  variables:
    TARGET: stable-fearless
  before_script:
    - *install_make
    - docker version
    - *docker_login
  script:
    - *build_rust_latest
    - docker push $REGISTRY_HOSTNAME/grauwoelfchen/rust:${TARGET}
  after_script:
    - docker logout
  only:
    - /^rust-stable-fearless-.*/
  except:
    - branches

build-rust-nightly:
  <<: *docker
  stage: build
  variables:
    TARGET: nightly
  before_script:
    - *install_make
  script:
    - *build_rust_latest
  only:
    - master

deploy-rust-nightly:
  <<: *docker
  stage: deploy
  variables:
    TARGET: nightly
  before_script:
    - *install_make
    - docker version
    - *docker_login
  script:
    - *build_rust_latest
    - docker push $REGISTRY_HOSTNAME/grauwoelfchen/rust:${TARGET}
  after_script:
    - docker logout
  only:
    - /^rust-nightly-.*/
  except:
    - branches
    - /^rust-nightly-fearless-.*/

build-rust-nightly-fearless:
  <<: *docker
  stage: build
  variables:
    TARGET: nightly-fearless
  before_script:
    - *install_make
  script:
    - *build_rust_latest
  only:
    - master

deploy-rust-nightly-fearless:
  <<: *docker
  stage: deploy
  variables:
    TARGET: nightly-fearless
  before_script:
    - *install_make
    - docker version
    - *docker_login
  script:
    - *build_rust_latest
    - docker push $REGISTRY_HOSTNAME/grauwoelfchen/rust:${TARGET}
  after_script:
    - docker logout
  only:
    - /^rust-nightly-fearless-.*/
  except:
    - branches

# rust-vet-tools

build-rust-vet-tools-stable:
  stage: build
  image: docker:latest
  variables:
    CONTAINER_NAME: grauwoelfchen/rust-vet-tools
    CONTAINER_TAG: stable
  services:
    - docker:dind
  script:
    - cd rust-vet-tools
    - docker build -t $REGISTRY_HOSTNAME/$CONTAINER_NAME:$CONTAINER_TAG
      stable
    - docker tag $REGISTRY_HOSTNAME/$CONTAINER_NAME:$CONTAINER_TAG
      $REGISTRY_HOSTNAME/$CONTAINER_NAME:$CONTAINER_TAG
    - docker push $REGISTRY_HOSTNAME/$CONTAINER_NAME:$CONTAINER_TAG
  after_script:
    - docker logout
  only:
    - rust-vet-tools-stable

build-rust-vet-tools-nightly:
  stage: build
  image: docker:latest
  variables:
    CONTAINER_NAME: grauwoelfchen/rust-vet-tools
    CONTAINER_TAG: nightly
  services:
    - docker:dind
  script:
    - cd rust-vet-tools
    - docker build -t $REGISTRY_HOSTNAME/$CONTAINER_NAME:$CONTAINER_TAG
      nightly
    - docker tag $REGISTRY_HOSTNAME/$CONTAINER_NAME:$CONTAINER_TAG
      $REGISTRY_HOSTNAME/$CONTAINER_NAME:$CONTAINER_TAG
    - docker push $REGISTRY_HOSTNAME/$CONTAINER_NAME:$CONTAINER_TAG
  after_script:
    - docker logout
  only:
    - rust-vet-tools-nightly

# rust-dev-tools
