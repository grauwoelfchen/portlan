stages:
  - build
  - deploy

# TODO
# * remove make
# * share artifacts between stages

.docker: &docker
  image: docker:latest
  services:
    - docker:dind

.registry_login:
  - &registry_login
    echo "$REGISTRY_PASSWORD"
    | docker login --username $REGISTRY_USERNAME
      --password-stdin $REGISTRY_HOSTNAME

.install_make: &install_make
  - apk add --no-cache make

# gentoo

.build_gentoo: &build_gentoo
  - cd gentoo
  - make build:${TARGET}:${TAG}

.deploy_gentoo: &deploy_gentoo
  - *registry_login
  # date
  - docker tag ${NAMESPACE}/gentoo-${TARGET}:${TAG}
    ${REGISTRY_HOSTNAME}/${NAMESPACE}/${IMAGE}-${TARGET}:${TAG}
  - docker push ${REGISTRY_HOSTNAME}/${NAMESPACE}/${IMAGE}-${TARGET}:${TAG}
  # latest
  - docker tag ${NAMESPACE}/gentoo-${TARGET}:${TAG}
    ${REGISTRY_HOSTNAME}/${NAMESPACE}/${IMAGE}-${TARGET}:latest
  - docker push $REGISTRY_HOSTNAME/${NAMESPACE}/${IMAGE}-${TARGET}:latest
  - docker logout

## gentoo-amd64

build-gentoo-amd64:
  <<: *docker
  stage: build
  variables:
    TARGET: amd64
  before_script:
    - *install_make
  script:
    - export TAG=latest
    - *build_gentoo
  only:
    - gentoo-amd64
    - master

deploy-gentoo-amd64-docker_hub:
  <<: *docker
  stage: deploy
  variables:
    IMAGE: gentoo
    TARGET: amd64
    REGISTRY_HOSTNAME: $REGISTRY_DOCKER_HUB_HOSTNAME
    REGISTRY_USERNAME: $REGISTRY_DOCKER_HUB_USERNAME
    REGISTRY_PASSWORD: $REGISTRY_DOCKER_HUB_PASSWORD
  dependencies:
    - build-gentoo-amd64
  before_script:
    - *install_make
  script:
    - export TAG=$(date +%Y%m%d)
    - *build_gentoo
    - *deploy_gentoo
  only:
    - gentoo-amd64
  except:
    - tags

deploy-gentoo-amd64-gitlab:
  <<: *docker
  stage: deploy
  variables:
    IMAGE: portolan/gentoo
    TARGET: amd64
    REGISTRY_HOSTNAME: $REGISTRY_GITLAB_HOSTNAME
    REGISTRY_USERNAME: $REGISTRY_GITLAB_USERNAME
    REGISTRY_PASSWORD: $REGISTRY_GITLAB_PASSWORD
  dependencies:
    - build-gentoo-amd64
  before_script:
    - *install_make
  script:
    - export TAG=$(date +%Y%m%d)
    - *build_gentoo
    - *deploy_gentoo
  only:
    - gentoo-amd64
  except:
    - tags

## gentoo-amd64-nomultilib

build-gentoo-amd64-nomultilib:
  <<: *docker
  stage: build
  variables:
    TARGET: amd64-nomultilib
  before_script:
    - *install_make
  script:
    - export TAG=latest
    - *build_gentoo
  only:
    - gentoo-amd64-nomultilib
    - master

deploy-gentoo-amd64-nomultilib-docker_hub:
  <<: *docker
  stage: deploy
  variables:
    IMAGE: gentoo
    TARGET: amd64-nomultilib
    REGISTRY_HOSTNAME: $REGISTRY_DOCKER_HUB_HOSTNAME
    REGISTRY_USERNAME: $REGISTRY_DOCKER_HUB_USERNAME
    REGISTRY_PASSWORD: $REGISTRY_DOCKER_HUB_PASSWORD
  dependencies:
    - build-gentoo-amd64-nomultilib
  before_script:
    - *install_make
  script:
    - export TAG=$(date +%Y%m%d)
    - *build_gentoo
    - *deploy_gentoo
  only:
    - gentoo-amd64-nomultilib
  except:
    - tags

deploy-gentoo-amd64-nomultilib-gitlab:
  <<: *docker
  stage: deploy
  variables:
    IMAGE: portolan/gentoo
    TARGET: amd64-nomultilib
    REGISTRY_HOSTNAME: $REGISTRY_GITLAB_HOSTNAME
    REGISTRY_USERNAME: $REGISTRY_GITLAB_USERNAME
    REGISTRY_PASSWORD: $REGISTRY_GITLAB_PASSWORD
  dependencies:
    - build-gentoo-amd64-nomultilib
  before_script:
    - *install_make
  script:
    - export TAG=$(date +%Y%m%d)
    - *build_gentoo
    - *deploy_gentoo
  only:
    - gentoo-amd64-nomultilib
  except:
    - tags

# rust

.build_rust: &build_rust
  - cd rust
  - make build:${TARGET}:${TAG}

.deploy_rust: &deploy_rust
  # version (e.g. 1.40.0-stable)
  - export VERSION=$(
      docker container run -it --rm ${NAMESPACE}/rust:${TARGET} rustc --version |
      awk '{sub(/-.*/, "", $2); print $2}'
    )-${TARGET}
  - docker tag ${NAMESPACE}/rust:${TARGET}-${TAG}
    ${REGISTRY_HOSTNAME}/${NAMESPACE}/${IMAGE}:${VERSION}
  - docker push ${REGISTRY_HOSTNAME}/${NAMESPACE}/${IMAGE}:${VERSION}
  # default (no latest)
  - docker tag ${NAMESPACE}/rust:${TARGET}-${TAG}
    ${REGISTRY_HOSTNAME}/${NAMESPACE}/${IMAGE}:${TARGET}
  - docker push $REGISTRY_HOSTNAME/${NAMESPACE}/${IMAGE}:${TARGET}
  - docker logout

.deploy_rust_with_date: &deploy_rust_with_date
  # date (e.g. nightly-2020-01-02)
  - docker tag ${NAMESPACE}/rust:${TARGET}-${TAG}
    ${REGISTRY_HOSTNAME}/${NAMESPACE}/${IMAGE}:${TARGET}:${TAG}
  - docker push $REGISTRY_HOSTNAME/${NAMESPACE}/${IMAGE}:${TARGET}-${TAG}
  # version (e.g. 1.40.0-{stable|nightly} etc.)
  - export VERSION=$(
      docker container run -it --rm ${NAMESPACE}/rust:${TARGET} rustc --version |
      awk '{sub(/-.*/, "", $2); print $2}'
    )-${TARGET}
  - docker tag ${NAMESPACE}/rust:${TARGET}-${TAG}
    ${REGISTRY_HOSTNAME}/${NAMESPACE}/${IMAGE}:${VERSION}
  - docker push ${REGISTRY_HOSTNAME}/${NAMESPACE}/${IMAGE}:${VERSION}
  # default (no latest)
  - docker tag ${NAMESPACE}/rust:${TARGET}-${TAG}
    ${REGISTRY_HOSTNAME}/${NAMESPACE}/${IMAGE}:${TARGET}
  - docker push $REGISTRY_HOSTNAME/${NAMESPACE}/${IMAGE}:${TARGET}
  - docker logout

## rust-stable

build-rust-stable:
  <<: *docker
  stage: build
  variables:
    TARGET: stable
  before_script:
    - *install_make
  script:
    - export TAG=latest
    - *build_rust
  only:
    - rust-stable
    - master

deploy-rust-stable-docker_hub:
  <<: *docker
  stage: deploy
  variables:
    IMAGE: rust
    TARGET: stable
    REGISTRY_HOSTNAME: $REGISTRY_DOCKER_HUB_HOSTNAME
    REGISTRY_USERNAME: $REGISTRY_DOCKER_HUB_USERNAME
    REGISTRY_PASSWORD: $REGISTRY_DOCKER_HUB_PASSWORD
  dependencies:
    - build-rust-stable
  before_script:
    - *install_make
  script:
    - export TAG=latest
    - *build_rust
    - *registry_login
    - *deploy_rust
  only:
    - rust-stable
  except:
    - tags

deploy-rust-stable-gitlab:
  <<: *docker
  stage: deploy
  variables:
    IMAGE: portolan/rust
    TARGET: stable
    REGISTRY_HOSTNAME: $REGISTRY_GITLAB_HOSTNAME
    REGISTRY_USERNAME: $REGISTRY_GITLAB_USERNAME
    REGISTRY_PASSWORD: $REGISTRY_GITLAB_PASSWORD
  dependencies:
    - build-rust-stable
  before_script:
    - *install_make
  script:
    - export TAG=latest
    - *build_rust
    - *registry_login
    - *deploy_rust
  only:
    - rust-stable
  except:
    - tags

## rust-stable (fearless)

build-rust-stable-fearless:
  <<: *docker
  stage: build
  variables:
    TARGET: stable-fearless
  before_script:
    - *install_make
  script:
    - export TAG=latest
    - *build_rust
  only:
    - rust-stable
    - master

deploy-rust-stable-fearless-docker_hub:
  <<: *docker
  stage: deploy
  variables:
    IMAGE: rust
    TARGET: stable-fearless
    REGISTRY_HOSTNAME: $REGISTRY_DOCKER_HUB_HOSTNAME
    REGISTRY_USERNAME: $REGISTRY_DOCKER_HUB_USERNAME
    REGISTRY_PASSWORD: $REGISTRY_DOCKER_HUB_PASSWORD
  dependencies:
    - build-rust-stable-fearless
  before_script:
    - *install_make
  script:
    - export TAG=latest
    - *build_rust
    - *registry_login
    - *deploy_rust
  only:
    - rust-stable
  except:
    - tags

deploy-rust-stable-fearless-gitlab:
  <<: *docker
  stage: deploy
  variables:
    IMAGE: portolan/rust
    TARGET: stable-fearless
    REGISTRY_HOSTNAME: $REGISTRY_GITLAB_HOSTNAME
    REGISTRY_USERNAME: $REGISTRY_GITLAB_USERNAME
    REGISTRY_PASSWORD: $REGISTRY_GITLAB_PASSWORD
  dependencies:
    - build-rust-stable-fearless
  before_script:
    - *install_make
  script:
    - export TAG=latest
    - *build_rust
    - *registry_login
    - *deploy_rust
  only:
    - rust-stable
  except:
    - tags

## rust-nightly

build-rust-nightly:
  <<: *docker
  stage: build
  variables:
    TARGET: nightly
  before_script:
    - *install_make
  script:
    - export TAG=latest
    - *build_rust
  only:
    - rust-nightly
    - master

deploy-rust-nightly-docker_hub:
  <<: *docker
  stage: deploy
  variables:
    IMAGE: rust
    TARGET: nightly
    REGISTRY_HOSTNAME: $REGISTRY_DOCKER_HUB_HOSTNAME
    REGISTRY_USERNAME: $REGISTRY_DOCKER_HUB_USERNAME
    REGISTRY_PASSWORD: $REGISTRY_DOCKER_HUB_PASSWORD
  dependencies:
    - build-rust-nightly
  before_script:
    - *install_make
  script:
    - export TAG=$(date +%Y-%m-%d)
    - *build_rust
    - *registry_login
    - *deploy_rust_with_date
  only:
    - rust-nightly
  except:
    - tags

deploy-rust-nightly-gitlab:
  <<: *docker
  stage: deploy
  variables:
    IMAGE: portolan/rust
    TARGET: nightly
    REGISTRY_HOSTNAME: $REGISTRY_GITLAB_HOSTNAME
    REGISTRY_USERNAME: $REGISTRY_GITLAB_USERNAME
    REGISTRY_PASSWORD: $REGISTRY_GITLAB_PASSWORD
  dependencies:
    - build-rust-nightly
  before_script:
    - *install_make
  script:
    - export TAG=$(date +%Y-%m-%d)
    - *build_rust
    - *registry_login
    - *deploy_rust_with_date
  only:
    - rust-nightly
  except:
    - tags

## rust-nightly (fearless)

build-rust-nightly-fearless:
  <<: *docker
  stage: build
  variables:
    TARGET: nightly-fearless
  before_script:
    - *install_make
  script:
    - export TAG=latest
    - *build_rust
  only:
    - rust-nightly
    - master

deploy-rust-nightly-fearless-docker_hub:
  <<: *docker
  stage: deploy
  variables:
    IMAGE: rust
    TARGET: nightly-fearless
    REGISTRY_HOSTNAME: $REGISTRY_DOCKER_HUB_HOSTNAME
    REGISTRY_USERNAME: $REGISTRY_DOCKER_HUB_USERNAME
    REGISTRY_PASSWORD: $REGISTRY_DOCKER_HUB_PASSWORD
  before_script:
    - *install_make
  script:
    - export TAG=$(date +%Y-%m-%d)
    - *build_rust
    - *registry_login
    - *deploy_rust_with_date
  only:
    - rust-nightly
  except:
    - tags

deploy-rust-nightly-fearless-gitlab:
  <<: *docker
  stage: deploy
  variables:
    IMAGE: portolan/rust
    TARGET: nightly-fearless
    REGISTRY_HOSTNAME: $REGISTRY_GITLAB_HOSTNAME
    REGISTRY_USERNAME: $REGISTRY_GITLAB_USERNAME
    REGISTRY_PASSWORD: $REGISTRY_GITLAB_PASSWORD
  before_script:
    - *install_make
  script:
    - export TAG=$(date +%Y-%m-%d)
    - *build_rust
    - *registry_login
    - *deploy_rust_with_date
  only:
    - rust-nightly
  except:
    - tags

# rust-vet-tools

build-rust-vet-tools-stable:
  stage: build
  image: docker:latest
  variables:
    CONTAINER_NAME: grauwoelfchen/rust-vet-tools
    CONTAINER_TAG: stable
  services:
    - docker:dind
  script:
    - cd rust-vet-tools
    - docker build -t $REGISTRY_HOSTNAME/$CONTAINER_NAME:$CONTAINER_TAG
      stable
    - docker tag $REGISTRY_HOSTNAME/$CONTAINER_NAME:$CONTAINER_TAG
      $REGISTRY_HOSTNAME/$CONTAINER_NAME:$CONTAINER_TAG
    - docker push $REGISTRY_HOSTNAME/$CONTAINER_NAME:$CONTAINER_TAG
  after_script:
    - docker logout
  only:
    - rust-vet-tools-stable

build-rust-vet-tools-nightly:
  stage: build
  image: docker:latest
  variables:
    CONTAINER_NAME: grauwoelfchen/rust-vet-tools
    CONTAINER_TAG: nightly
  services:
    - docker:dind
  script:
    - cd rust-vet-tools
    - docker build -t $REGISTRY_HOSTNAME/$CONTAINER_NAME:$CONTAINER_TAG
      nightly
    - docker tag $REGISTRY_HOSTNAME/$CONTAINER_NAME:$CONTAINER_TAG
      $REGISTRY_HOSTNAME/$CONTAINER_NAME:$CONTAINER_TAG
    - docker push $REGISTRY_HOSTNAME/$CONTAINER_NAME:$CONTAINER_TAG
  after_script:
    - docker logout
  only:
    - rust-vet-tools-nightly

# rust-dev-tools
